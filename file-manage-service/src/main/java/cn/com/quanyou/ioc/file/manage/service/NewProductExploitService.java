package cn.com.quanyou.ioc.file.manage.service;

import cn.com.quanyou.ioc.common.component.util.DateTimeUtils;
import cn.com.quanyou.ioc.common.component.util.StringUtils;
import cn.com.quanyou.ioc.file.manage.common.PageInfo;
import cn.com.quanyou.ioc.file.manage.common.ResultInfo;
import cn.com.quanyou.ioc.file.manage.common.enums.ResultStatusEnum;
import cn.com.quanyou.ioc.file.manage.common.enums.ValidStatusEnum;
import cn.com.quanyou.ioc.file.manage.common.utils.ExcelUtil.importExcel.BeanUtils;
import cn.com.quanyou.ioc.file.manage.common.utils.ExcelUtil.importExcel.ExcelModel;
import cn.com.quanyou.ioc.file.manage.common.utils.ExcelUtil.importExcel.ExcelUtilsMap;
import cn.com.quanyou.ioc.file.manage.common.utils.FastdfsUtils.FileManager;
import cn.com.quanyou.ioc.file.manage.dao.IPutAwayTiDao;
import cn.com.quanyou.ioc.file.manage.facade.IExcelImportService;
import cn.com.quanyou.ioc.file.manage.vo.AnalysisTaskBean;
import cn.com.quanyou.ioc.file.manage.vo.AnalysisTaskErrorBean;
import cn.com.quanyou.ioc.file.manage.vo.ExcelImportEntities.PutAwayTi;
import cn.com.quanyou.ioc.file.manage.vo.SearchParamVo;
import cn.com.quanyou.ioc.file.manage.vo.UploadFileInfoBean;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;

import java.util.*;
import java.util.stream.Collectors;

/**
 * @Description //新品上架批量新增服务
 * @Author yangli
 * @Date 2019/10/10-10:17
 **/
@Service
@Slf4j
public class NewProductExploitService extends ExcelImportService implements IExcelImportService<PutAwayTi> {

    @Autowired
    private IPutAwayTiDao importDao;

    @Override
    public void importExcel(AnalysisTaskBean task, ExcelModel excelModel) {

        UploadFileInfoBean fileInfo = task.getFileInfo();
        if (fileInfo == null || excelModel == null) {
            return;
        }
        ExcelUtilsMap<PutAwayTi> excelUtils = new ExcelUtilsMap<>(PutAwayTi.class, this);
        excelUtils.importExcelByXlsxStreamer(FileManager.downFile(fileInfo.getGroupName(), fileInfo.getRemoteFileName()), excelModel, task);
    }

    @Override
    public void dataValidate(String taskId, String loginUser) {
        List<Map<String, Object>> dataList = importDao.queryByTaskId(taskId, ValidStatusEnum.unValid.getCode());
        BeanUtils<PutAwayTi> beanUtils = new BeanUtils<>(PutAwayTi.class);
        List<String> validList = new ArrayList<>();
        List<String> unvalidList = new ArrayList<>();

        super.dataValidate(taskId, beanUtils, dataList, validList, unvalidList, loginUser);

        if (!validList.isEmpty()) {
            //更新验证结果
            importDao.updateValidStatusByDataIds(validList, ValidStatusEnum.success.getCode());
        }
        if (!unvalidList.isEmpty()) {
            importDao.updateValidStatusByDataIds(unvalidList, ValidStatusEnum.fail.getCode());
        }
    }

    @Override
    public List<AnalysisTaskErrorBean> relationDataCheck(List validList, List unvalidList, List entityList) {
        List<AnalysisTaskErrorBean> errorList = new ArrayList<>();

        List<PutAwayTi> unPutwayList = importDao.listUnPutwayRecord();

        List<PutAwayTi> list = entityList;

        Set<String> totalRepetitionList = new HashSet<>();
        for (PutAwayTi entity : list) {

            if (entity.getProductType() == null || entity.getProductName() == null || entity.getProductBatch() == null) {
                continue;
            }

            // 1校验日期格式
            if (!DateTimeUtils.checkDate(entity.getProductBatch())) {
                AnalysisTaskErrorBean errorInfo = new AnalysisTaskErrorBean();
                errorInfo.setTaskId(entity.getTaskId());
                errorInfo.setCellName("新品批次");
                errorInfo.setRow(Integer.parseInt(entity.getRowNumber()));
                errorInfo.setErrorInfo("新品批次（" + entity.getProductBatch() + "）格式不正确[eg:20190808]");

                errorList.add(errorInfo);
                unvalidList.add(entity.getDataId());
            }

            if ("翻拍".equals(entity.getProductType())){
                if (StringUtils.isBlank(entity.getReShootingReason())){
                    AnalysisTaskErrorBean errorInfo = new AnalysisTaskErrorBean();
                    errorInfo.setTaskId(entity.getTaskId());
                    errorInfo.setCellName("翻拍原因");
                    errorInfo.setRow(Integer.parseInt(entity.getRowNumber()));
                    errorInfo.setErrorInfo("当产品类型为【翻拍】时，翻拍原因不能为空！");

                    errorList.add(errorInfo);
                    unvalidList.add(entity.getDataId());
                }
            }else if("新品".equals(entity.getProductType())){
                if (StringUtils.isNotBlank(entity.getReShootingReason())){
                    AnalysisTaskErrorBean errorInfo = new AnalysisTaskErrorBean();
                    errorInfo.setTaskId(entity.getTaskId());
                    errorInfo.setCellName("翻拍原因");
                    errorInfo.setRow(Integer.parseInt(entity.getRowNumber()));
                    errorInfo.setErrorInfo("当产品类型为【新品】时，翻拍原因不能填写！");

                    errorList.add(errorInfo);
                    unvalidList.add(entity.getDataId());
                }
            }
            // 2校验唯一性
            List<PutAwayTi> existList = new ArrayList<>();
            if (!CollectionUtils.isEmpty(unPutwayList)) {
                existList = unPutwayList.stream().filter(e ->
                                entity.getProductType().equals(e.getProductType()) &&
                                entity.getProductName().equals(e.getProductName())
                ).collect(Collectors.toList());
            }
            if (!CollectionUtils.isEmpty(existList)) {
                AnalysisTaskErrorBean errorInfo = new AnalysisTaskErrorBean();
                errorInfo.setTaskId(entity.getTaskId());
                errorInfo.setCellName("唯一性校验");
                errorInfo.setRow(Integer.parseInt(entity.getRowNumber()));
                errorInfo.setErrorInfo("产品类型【" + entity.getProductType() + "】-名称【" + entity.getProductName() + "】已在未上架的上架环节中");

                errorList.add(errorInfo);
                unvalidList.add(entity.getDataId());
            }

            //3数据重复校验
            List<String> currentRepetitionList = list.stream().filter(e ->
                            entity.getProductName().equals(e.getProductName())
                            && entity.getProductType().equals(e.getProductType())
                            && entity.getProductBatch().equals(e.getProductBatch()))
                    .map(PutAwayTi::getRowNumber)
                    .collect(Collectors.toList());
            if (currentRepetitionList.size() > 1) {

                if (!totalRepetitionList.contains(entity.getRowNumber())) {
                    totalRepetitionList.addAll(currentRepetitionList);

                    // 找到重复的rowNumbers
                    List<Integer> rowNumbers = currentRepetitionList.stream()
                            .filter(e -> !e.equals(entity.getRowNumber()))
                            .map(e -> Integer.parseInt(e) + 1)
                            .collect(Collectors.toList());

                    AnalysisTaskErrorBean errorInfo = new AnalysisTaskErrorBean();
                    errorInfo.setTaskId(entity.getTaskId());
                    errorInfo.setCellName("存在相同数据");
                    errorInfo.setRow(Integer.parseInt(entity.getRowNumber()));
                    errorInfo.setErrorInfo("在第" + rowNumbers + "行存在与第[" + (Integer.parseInt(entity.getRowNumber()) + 1) + "]行相同的数据");

                    errorList.add(errorInfo);
                    unvalidList.add(entity.getDataId());
                }
            }
        }

        return errorList;
    }

    @Transactional
    @Override
    public ResultInfo<String, String> copyDataFromTemp(String taskId) {
        ResultInfo<String, String> resultInfo = super.checkAnalysisStatus(taskId);
        if (resultInfo.isFailed()) {
            return resultInfo;
        }
        int count = importDao.queryMistakeAndUncheckedCount(taskId);
        if (count > 0) {
            log.info("还有数据没有验证或验证有误，停止从临时表导入正式表：task=" + taskId);
            resultInfo.setResultStatusEnum(ResultStatusEnum.failed);
            resultInfo.setMessage("还有数据没有验证或验证有误");
            return resultInfo;
        }

        importDao.cloneFromTempT(taskId);
        super.finishSyn(taskId);

        return resultInfo;
    }

    @Transactional
    @Override
    public void saveExcelDataMap(List<Map<String, Object>> dataList) {

        if (dataList == null || dataList.isEmpty()) {
            return;
        }
        importDao.addBatchMap(dataList);

    }

    @Override
    public ResultInfo<PageInfo<PutAwayTi>, String> search(SearchParamVo searchParamVo, PageInfo<PutAwayTi> pageInfo) {
        return null;
    }
}
